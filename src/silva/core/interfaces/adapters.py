# Copyright (c) 2002-2009 Infrae. All rights reserved.
# See also LICENSE.txt
# $Id$


from zope import interface


class IContentImporter(interface.Interface):
    """Generic content importer.
    """


class IArchiveFileImporter(IContentImporter):

    def importArchive(archivefile, assettitle=None, recreatedirs=1, replace=0):
        """Import archive file

        Use 'assettitle' for the title to set on all assets created

        According to the recreatedirs setting, create a substructure of
        Silva Containers (probably Silva Folders) reflecting the structure
        of the archive file. This substructure will be created relative to
        the adapted context.

        If replace is true, replace items with identical ids.

        Return a tuple with the list of succeeded items and failed items
        providing feedback on what archive contents have succesfully been
        imported into Silva Assets and what contents have not.
        """


class IZipFileImporter(IContentImporter):

    def isFullmediaArchive(input_archive):
        """Tests if the zip archive is a fullmedia archive
        """

    def importFromZip(input_archive, request, replace=False):
        """Import Silva content from a full media opened zip
        file. Optionaly replace content.
        """


IZipfileImporter = IZipFileImporter


class IContentExporter(interface.Interface):
    """Adapter for export context content in a file.
    """

    name = interface.Attribute("Name of the registered exporter")
    extension = interface.Attribute("Filename extension of files generated by this exporter")

    def export(settings):
        """Export context with given settings.
        """


class IDefaultContentExporter(IContentExporter):
    """This mark the default content exporter.
    """


class IAssetData(interface.Interface):
    def getData():
        """ Get actual data stored for this asset as calling index_html()
        for assets can have all kinds of unwanted side effects.
        """


class IIndexEntries(interface.Interface):

    def get_title():
        """Returns the title of the indexable.
        """

    def get_entries():
        """Returns the indexes for a certain object, or an empty list.
        """


class ILanguageProvider(interface.Interface):

    def getAvailableLanguages():
        """Return the available languages.
        """

    def setPreferredLanguage(language):
        """Sets the preferred language.
        """

    def getPreferredLanguage():
        """Gets the preferred language.
        """

class IPath(interface.Interface):

    def pathToUrl(path):
        """Convert a physical path to a URL.
        """

    def urlToPath(url):
        """Convert a HTTP URL to a physical path.
        """


class IFeedEntryProvider(interface.Interface):
    """Adapter to a object which provides a list feed entry that can
    used to build a RSS/Atom feed.
    """

    def entries():
        """Generate IFeedEntry objects.
        """


class IFeedEntry(interface.Interface):
    """Adapter to object to provide information to include in a
    RSS/Atom feed.
    """

    def id():
        """Give the id of the object.
        """
        pass

    def title():
        """Give the title.
        """

    def html_description():
        """Give an HTML description.
        """

    def description():
        """Give an non-HTML description.
        """

    def url():
        """Give the URL of the object.
        """

    def authors():
        """Give a list of authors.
        """

    def date_updated():
        """Date at which the content have been updated.
        """

    def date_published():
        """Publication date.
        """

    def subject():
        """Content subject.
        """

    def keywords():
        """Give a list of keywords matching the content
        """


class ISiteManager(interface.Interface):
    """Site Manager adapter.
    """

    def makeSite():
        """Make the context become a local site.
        """

    def deleteSite():
        """Release the context of being a local site.
        """

    def isSite():
        """Return true if the context is a local site.
        """


class IHaunted(interface.Interface):
    """Interface for haunted adapter
    """

    def getHaunting():
        """Return iterator of objects (ghosts) haunting the adapted object.
        """


class IVersionManager(interface.Interface):

    def make_editable():
        """revert a previous version to be editable version

        The current editable will become the last closed (last closed
        will move to closed list). If the published version will not
        be changed.

        Raises AttributeError when version id is not available.

        Raises VersioningError when 'editable' version is approved or
        in pending for approval.
        """

    def get_modification_datetime():
        """Return last modification time for the given version.
        """

    def get_publication_datetime():
        """Return publication time for the given version.
        """

    def get_expiration_datetime():
        """Return expiration time for the given version.
        """

    def get_last_author():
        """Return the last author of the given version.
        """

    def get_status():
        """Return the version status.
        """

    def delete():
        """Delete a version,

        Can raise AttributeError when the version doesn't exist,
        VersioningError if the version is approved(XXX?) or published.
        """


class IPublicationWorkflow(interface.Interface):
    """ Publication workflow of silva objects.

    All the following methods may raise a PublicationWorkflowError.
    """

    def new_version():
        """Create a new version if one is published or closed.
        """

    def request_approval(message):
        """Issue a request for approval.
        """

    def withdraw_request(message):
        """Withdraw a previous request for approval.
        """

    def reject_request(message):
        """Reject a request for approval.
        """

    def revoke_approval():
        """Revoke the currently approved version.
        """

    def publish():
        """Approve unapproved or last closed version.
        """

    def approve(time=None):
        """ Approve unapproved version. Set the publication date to
        the given ``time``, or to now if it is None.
        """

    def close():
        """ Close published version.
        """

    def get_versions(sort_attribute='id'):
        """Return a list of versions.

        If sort_attribute resolves to False, no sorting is done, by
        default it sorts on id converted to int (so [0,1,2,3,...]
        instead of [0,1,10,2,3,...] if values < 20).
        """


class IAddableContents(interface.Interface):
    """Return addables that can be added in the adapted container.
    """

    def get_authorized_addables(require=None):
        """Get a list of content that the current user is allowed to
        add in the adapted container (they can be added to the site,
        are not restricted in that container, and the current user
        have the permission to add them).

        If require is not None, it is an interface that the all the
        returned addable must implement.
        """

    def get_container_addables(require=None):
        """Get a list of content that can be added in the adapter
        container (they can be added to the site, and are not
        restricted in that container).

        If require is not None, it is an interface that the all the
        returned addable must implement.
        """

    def get_all_addables(require=None):
        """Get a list of all content that could be added in the
        adapted container (they can be added to the site).

        If require is not None, it is an interface that the all the
        returned addable must implement.
        """


class IContainerManager(interface.Interface):
    """Operation on container contents. Each method returns a comethod
    object, that can be used as a context manager.
    """

    def renamer():
        """Rename content into this container.
        """

    def copier():
        """Copy content into this container.
        """

    def mover():
        """Move content into this container.
        """

    def ghoster():
        """Ghost content into this container.
        """

    def deleter():
        """Delete content that are in this container.
        """


class IOrderManager(interface.Interface):
    """Manage order of a container content.
    """

    order = interface.Attribute(u"Order")
    ordered_only = interface.Attribute(u"Interface restricting ordered content")

    def move(content, index):
        """Move content just before index.
        Return true in case success.
        """

    def add(content):
        """Add a new content to the order list, if possible.
        """

    def remove(content):
        """Remove a content from the order list, if needed.
        """

    def get_contents():
        """Return ordered content in order.
        """

    def get_position(content):
        """Return the position of a content.
        """


class ITreeContents(interface.Interface):

    def get_tree(depth=-1):
        """Get flattened tree of all active publishables. The 'depth'
        argument limits the number of levels, defaults to unlimited.
        This is a list of indent, object tuples.
        """

    def get_container_tree(depth=-1):
        """Get flattened tree of all sub-containers. The 'depth'
        argument limits the number of levels, defaults to unlimited.
        This is a list of indent, object tuples.
        """

    def get_public_tree(depth=-1):
        """Get flattened tree with public content not hidden from
        tocs, excluding subpublications. The 'depth' argument limits
        the number of levels, defaults to unlimited. This is a list
        of indent, object tuples.
        """

    def get_public_tree_all(depth=-1):
        """Get flattened tree with all public content, excluding
        subpublications.  The 'depth' argument limits the number of
        levels, defaults to unlimited.  This is a list of indent,
        object tuples.
        """

    def get_status_tree(depth=-1):
        """Get tree of all active content objects. For containers,
        show the default object if available.  This is a list of
        indent, object tuples.
        """

class IIconResolver(interface.Interface):
    """Adapt a Zope request to return a content icon.
    """

    def get_tag(content):
        """Return a tag that generate an icon associated to the content.
        """

    def get_content(content):
        """Return the icon path associated to the given Zope content.
        """

    def get_content_url(content):
        """Return the full icon URL associated to the given Zope content.
        """
